# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_echo', [dirname(__file__)])
        except ImportError:
            import _echo
            return _echo
        if fp is not None:
            try:
                _mod = imp.load_module('_echo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _echo = swig_import_helper()
    del swig_import_helper
else:
    import _echo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class STNetMsgHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STNetMsgHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STNetMsgHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwMsgID"] = _echo.STNetMsgHeader_dwMsgID_set
    __swig_getmethods__["dwMsgID"] = _echo.STNetMsgHeader_dwMsgID_get
    if _newclass:dwMsgID = _swig_property(_echo.STNetMsgHeader_dwMsgID_get, _echo.STNetMsgHeader_dwMsgID_set)
    __swig_setmethods__["dwDataLen"] = _echo.STNetMsgHeader_dwDataLen_set
    __swig_getmethods__["dwDataLen"] = _echo.STNetMsgHeader_dwDataLen_get
    if _newclass:dwDataLen = _swig_property(_echo.STNetMsgHeader_dwDataLen_get, _echo.STNetMsgHeader_dwDataLen_set)
    def __init__(self): 
        this = _echo.new_STNetMsgHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _echo.delete_STNetMsgHeader
    __del__ = lambda self : None;
STNetMsgHeader_swigregister = _echo.STNetMsgHeader_swigregister
STNetMsgHeader_swigregister(STNetMsgHeader)

class SClientSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SClientSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SClientSocket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _echo.new_SClientSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _echo.delete_SClientSocket
    __del__ = lambda self : None;
    def OnRecvData(self): return _echo.SClientSocket_OnRecvData(self)
    def OnConnect(self): return _echo.SClientSocket_OnConnect(self)
    def OnDisconnect(self): return _echo.SClientSocket_OnDisconnect(self)
SClientSocket_swigregister = _echo.SClientSocket_swigregister
SClientSocket_swigregister(SClientSocket)

class TcpSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpSocket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _echo.new_TcpSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _echo.delete_TcpSocket
    __del__ = lambda self : None;
    def Write(self, *args): return _echo.TcpSocket_Write(self, *args)
    def Read(self, *args): return _echo.TcpSocket_Read(self, *args)
    def Disconnect(self): return _echo.TcpSocket_Disconnect(self)
    def Finalize(self): return _echo.TcpSocket_Finalize(self)
    def Delete(self): return _echo.TcpSocket_Delete(self)
    def OnRead(self, *args): return _echo.TcpSocket_OnRead(self, *args)
    def OnWrite(self, *args): return _echo.TcpSocket_OnWrite(self, *args)
    def OnRecvData(self): return _echo.TcpSocket_OnRecvData(self)
    def OnConnect(self): return _echo.TcpSocket_OnConnect(self)
    def OnDisconnect(self): return _echo.TcpSocket_OnDisconnect(self)
    def GetIP(self): return _echo.TcpSocket_GetIP(self)
    def OnError(self, *args): return _echo.TcpSocket_OnError(self, *args)
    def Writable(self): return _echo.TcpSocket_Writable(self)
    def OnAccept(self, *args): return _echo.TcpSocket_OnAccept(self, *args)
    def LockWriteBuffer(self): return _echo.TcpSocket_LockWriteBuffer(self)
    def UnlockWriteBuffer(self): return _echo.TcpSocket_UnlockWriteBuffer(self)
    def GetReadBuffer(self): return _echo.TcpSocket_GetReadBuffer(self)
    def GetWriteBuffer(self): return _echo.TcpSocket_GetWriteBuffer(self)
TcpSocket_swigregister = _echo.TcpSocket_swigregister
TcpSocket_swigregister(TcpSocket)


def PyStdOut(*args):
  return _echo.PyStdOut(*args)
PyStdOut = _echo.PyStdOut

def help():
  return _echo.help()
help = _echo.help

def init_script():
  return _echo.init_script()
init_script = _echo.init_script

def double_it(*args):
  return _echo.double_it(*args)
double_it = _echo.double_it
class ScriptManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["CreateScriptManager"] = lambda x: _echo.ScriptManager_CreateScriptManager
    if _newclass:CreateScriptManager = staticmethod(_echo.ScriptManager_CreateScriptManager)
    __swig_destroy__ = _echo.delete_ScriptManager
    __del__ = lambda self : None;
    __swig_getmethods__["Instance"] = lambda x: _echo.ScriptManager_Instance
    if _newclass:Instance = staticmethod(_echo.ScriptManager_Instance)
    def ImportPythonModule(self, *args): return _echo.ScriptManager_ImportPythonModule(self, *args)
    def ReImportPythonModule(self, *args): return _echo.ScriptManager_ReImportPythonModule(self, *args)
    def ReImportAllModule(self): return _echo.ScriptManager_ReImportAllModule(self)
    def CallPythonCommand(self, *args): return _echo.ScriptManager_CallPythonCommand(self, *args)
    def Shell(self): return _echo.ScriptManager_Shell(self)
    def HasPythonFunc(self, *args): return _echo.ScriptManager_HasPythonFunc(self, *args)
    def InitArgv(self, *args): return _echo.ScriptManager_InitArgv(self, *args)
    def GetModuleNumber(self): return _echo.ScriptManager_GetModuleNumber(self)
    def GetModuleMap(self): return _echo.ScriptManager_GetModuleMap(self)
ScriptManager_swigregister = _echo.ScriptManager_swigregister
ScriptManager_swigregister(ScriptManager)

def ScriptManager_CreateScriptManager():
  return _echo.ScriptManager_CreateScriptManager()
ScriptManager_CreateScriptManager = _echo.ScriptManager_CreateScriptManager

def ScriptManager_Instance():
  return _echo.ScriptManager_Instance()
ScriptManager_Instance = _echo.ScriptManager_Instance

# This file is compatible with both classic and new-style classes.


